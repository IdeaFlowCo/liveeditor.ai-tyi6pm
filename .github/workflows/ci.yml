name: Continuous Integration

# Workflow triggers
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  backend-checks:
    name: Backend Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -r backend/requirements-dev.txt
          
      - name: Run pylint
        run: |
          cd backend
          # Fail if pylint score is below 8.0 (out of 10)
          pylint --rcfile=.pylintrc --fail-under=8.0 .
          
      - name: Run unit tests
        run: |
          cd backend
          # Enforce minimum code coverage of 85% as per quality requirements
          pytest --cov=. --cov-report=xml:../coverage-reports/backend-coverage.xml --cov-report=term --cov-fail-under=85 --junitxml=../test-reports/backend-test-results.xml
          
      - name: Run integration tests
        run: |
          cd backend
          # Integration tests focus on API endpoints and service interactions
          pytest --cov=. --cov-report=xml:../coverage-reports/backend-integration-coverage.xml --junitxml=../test-reports/backend-integration-results.xml tests/integration/
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: |
            test-reports/backend-*.xml
            coverage-reports/backend-*.xml
            
      - name: Check for Python vulnerabilities
        run: |
          pip install safety
          # Fail if any high or critical vulnerabilities are found
          safety check --full-report -r backend/requirements.txt

  frontend-checks:
    name: Frontend Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run ESLint
        run: |
          cd frontend
          # Fail if any ESLint warnings are found
          npm run lint -- --max-warnings=0
          
      - name: Type check TypeScript
        run: |
          cd frontend
          npm run type-check
          
      - name: Run unit tests
        run: |
          cd frontend
          # Enforce code coverage thresholds as per quality requirements
          # - 80% line coverage
          # - 85% function coverage
          # - 75% branch coverage
          npm run test -- --coverage --ci --reporters=default --reporters=jest-junit --coverageThreshold='{"global":{"lines":80,"statements":80,"functions":85,"branches":75}}'
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: |
            frontend/junit.xml
            frontend/coverage/
            
      - name: Build frontend
        run: |
          cd frontend
          npm run build
          
      - name: Check for npm vulnerabilities
        run: |
          cd frontend
          # Fail if any high or critical vulnerabilities are found in production dependencies
          npm audit --audit-level=high --production

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-checks, frontend-checks]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run additional security checks for frontend
        run: |
          cd frontend
          # Check for common web vulnerabilities in dependencies
          npm install -g retire
          retire --severity high --outputformat json --outputpath retire-results.json || true
          
      - name: Upload retire.js scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: frontend/retire-results.json

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-checks, frontend-checks]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          tags: ai-writing-enhancement/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: false
          tags: ai-writing-enhancement/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Scan Docker images for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'ai-writing-enhancement/backend:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL'