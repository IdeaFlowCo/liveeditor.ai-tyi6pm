name: Infrastructure Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure-deploy.yml'
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_INPUT: false
  TF_IN_AUTOMATION: true

jobs:
  terraform_lint:
    name: Terraform Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: terraform
        continue-on-error: true
        
      - name: Run TFLint
        uses: terraform-linters/tflint-action@v2
        with:
          working_directory: terraform

      - name: Post Format Results
        if: github.event_name == 'pull_request' && steps.fmt.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format Check Failed
            Please run \`terraform fmt\` to fix the formatting issues.`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform_security_scan:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    needs: terraform_lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform
          format: sarif
          out: tfsec.sarif
          soft_fail: true
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: tfsec.sarif
          category: tfsec

      - name: Post Security Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              const sarif = JSON.parse(fs.readFileSync('tfsec.sarif', 'utf8'));
              const results = sarif.runs[0]?.results || [];
              
              if (results.length > 0) {
                let output = `#### Terraform Security Scan Results\n\n`;
                output += `${results.length} issue(s) found\n\n`;
                
                for (const result of results.slice(0, 10)) {
                  output += `- **${result.level}**: ${result.message.text}\n`;
                  output += `  - Location: ${result.locations[0].physicalLocation.artifactLocation.uri}:${result.locations[0].physicalLocation.region.startLine}\n\n`;
                }
                
                if (results.length > 10) {
                  output += `\n... and ${results.length - 10} more issues`;
                }
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                });
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '#### Terraform Security Scan Passed\nNo security issues found.'
                });
              }
            } catch (error) {
              console.error('Error processing security results:', error);
            }

  terraform_plan:
    name: Terraform Plan (${{ matrix.environment }})
    needs: terraform_security_scan
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        environment: [dev, staging, prod]
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'push' && github.ref == 'refs/heads/main') || 
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.action == 'plan' || github.event.inputs.environment == matrix.environment))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets['AWS_ROLE_TO_ASSUME_' + matrix.environment] }}
          role-duration-seconds: 1200
      
      - name: Terraform Init
        id: init
        run: terraform init -backend-config=environments/${{ matrix.environment }}/backend.tfvars
        working-directory: terraform
      
      - name: Terraform Workspace
        run: terraform workspace select ${{ matrix.environment }} || terraform workspace new ${{ matrix.environment }}
        working-directory: terraform
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=environments/${{ matrix.environment }}/terraform.tfvars -out=tfplan_${{ matrix.environment }}
        working-directory: terraform
      
      - name: Generate Plan Summary
        if: github.event_name == 'pull_request'
        run: terraform show -no-color tfplan_${{ matrix.environment }} > plan_summary_${{ matrix.environment }}.txt
        working-directory: terraform
      
      - name: Upload Plan Summary
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: plan_summary_${{ matrix.environment }}
          path: terraform/plan_summary_${{ matrix.environment }}.txt
          retention-days: 7
      
      - name: Post Plan Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('terraform/plan_summary_${{ matrix.environment }}.txt', 'utf8');
            const maxLength = 65000; // GitHub comment size limit
            
            let output = `#### Terraform Plan Output for ${{ matrix.environment }}\n\n`;
            output += '<details><summary>Show Plan</summary>\n\n```\n';
            
            if (planOutput.length > maxLength) {
              output += planOutput.substring(0, maxLength) + '\n\n... Output truncated due to size limit';
            } else {
              output += planOutput;
            }
            
            output += '\n```\n</details>';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan_${{ matrix.environment }}
          path: terraform/tfplan_${{ matrix.environment }}
          retention-days: 1

  terraform_apply:
    name: Terraform Apply (${{ github.event.inputs.environment }})
    needs: terraform_plan
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'apply'
    # GitHub environment for deployment approvals and protection rules
    environment:
      name: ${{ github.event.inputs.environment }}
    concurrency:
      group: terraform-apply-${{ github.event.inputs.environment }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets['AWS_ROLE_TO_ASSUME_' + github.event.inputs.environment] }}
          role-duration-seconds: 1200
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan_${{ github.event.inputs.environment }}
          path: terraform
      
      - name: Terraform Init
        run: terraform init -backend-config=environments/${{ github.event.inputs.environment }}/backend.tfvars
        working-directory: terraform
      
      - name: Terraform Workspace
        run: terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}
        working-directory: terraform
      
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan_${{ github.event.inputs.environment }}
        working-directory: terraform
      
      - name: Notify on Success
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const run_id = context.runId;
            
            if (context.issue.number) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: owner,
                repo: repo,
                body: `✅ Infrastructure successfully applied to **${{ github.event.inputs.environment }}** environment in [workflow run #${run_id}](https://github.com/${owner}/${repo}/actions/runs/${run_id})`
              });
            }

  terraform_destroy:
    name: Terraform Destroy (${{ github.event.inputs.environment }})
    needs: terraform_security_scan
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'destroy'
    # GitHub environment for deployment approvals and protection rules
    environment:
      name: ${{ github.event.inputs.environment }}-destroy
    concurrency:
      group: terraform-destroy-${{ github.event.inputs.environment }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets['AWS_ROLE_TO_ASSUME_' + github.event.inputs.environment] }}
          role-duration-seconds: 1200
      
      - name: Terraform Init
        run: terraform init -backend-config=environments/${{ github.event.inputs.environment }}/backend.tfvars
        working-directory: terraform
      
      - name: Terraform Workspace
        run: terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}
        working-directory: terraform
      
      - name: Terraform Plan Destroy
        id: plan_destroy
        run: terraform plan -destroy -var-file=environments/${{ github.event.inputs.environment }}/terraform.tfvars -out=tfplan_destroy
        working-directory: terraform
      
      - name: Display Destroy Plan
        run: terraform show -no-color tfplan_destroy
        working-directory: terraform
      
      - name: Terraform Destroy
        id: destroy
        run: terraform apply -auto-approve tfplan_destroy
        working-directory: terraform
      
      - name: Notify on Success
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const run_id = context.runId;
            
            if (context.issue.number) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: owner,
                repo: repo,
                body: `⚠️ Infrastructure successfully destroyed in **${{ github.event.inputs.environment }}** environment in [workflow run #${run_id}](https://github.com/${owner}/${repo}/actions/runs/${run_id})`
              });
            }