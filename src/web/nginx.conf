# User and worker configuration
user nginx;                          # Sets the user context for the Nginx worker processes
worker_processes auto;               # Automatically adjusts the number of worker processes based on available cores
error_log /var/log/nginx/error.log warn;  # Configures error logging path and level
pid /var/run/nginx.pid;              # Defines the file that will store the process ID of the main process

# Connection processing configuration
events {
    worker_connections 1024;         # Set worker_connections to 1024 to handle concurrent connections
    multi_accept on;                 # Configure multi_accept for accepting multiple connections
}

# Main HTTP configuration block containing global web server settings
http {
    # Basic settings
    include /etc/nginx/mime.types;   # Include mime.types to properly serve different file types
    default_type application/octet-stream;  # Set default_type to application/octet-stream
    access_log /var/log/nginx/access.log combined;  # Configure access_log
    server_tokens off;               # Disable server version exposure with server_tokens off
    client_max_body_size 10M;        # Set client_max_body_size to 10M for document uploads

    # Compression settings
    gzip on;                        # Enable gzip compression for text-based assets
    gzip_comp_level 6;              # with compression level 6
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types                      # Configure gzip_types for JS, CSS, JSON, and other text formats
        text/plain
        text/css
        text/javascript
        application/javascript
        application/json
        application/x-javascript
        application/xml
        application/xml+rss
        image/svg+xml;
    gzip_vary on;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;  # Set up proper SSL protocols
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';  # Configure cipher suites for secure communication

    # Optimization settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Buffer sizes and timeouts for optimal performance
    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k;
    client_body_buffer_size 128k;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # Server configuration for the frontend application
    server {
        listen 80;                  # Listen on port 80
        server_name _;              # Set server_name to match deployment domain (replace in production)

        # Configure root to /usr/share/nginx/html where built assets are located
        root /usr/share/nginx/html;
        index index.html;           # Set index.html as default document

        # Configure custom error pages for 404 and 500 errors
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # Add server-wide security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Root location handler for SPA routing
        location / {
            # Use try_files directive to route all requests to index.html for SPA routing
            try_files $uri $uri/ /index.html;
            
            # Disable caching for HTML with 'no-store, no-cache' Cache-Control headers
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            add_header Pragma "no-cache";
            expires -1;             # Set expires to -1 to prevent caching of the main HTML document
            
            # Apply security headers including Content-Security-Policy, X-Frame-Options, X-Content-Type-Options
            add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; connect-src 'self' https://api.openai.com; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; worker-src 'self'; frame-ancestors 'none';" always;
            add_header X-Frame-Options "DENY" always;
        }

        # Proxy configuration for backend API requests
        location /api/ {
            # Proxy requests to /api/ to the backend service at http://backend:5000
            proxy_pass http://backend:5000;
            proxy_http_version 1.1;  # Configure proxy_http_version to 1.1 for HTTP/1.1 support
            
            # Set proxy headers for WebSocket support (Upgrade and Connection)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Preserve original host with proxy_set_header Host
            proxy_set_header Host $host;
            # Add X-Real-IP and X-Forwarded-For headers for proper IP tracking
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Configure proxy timeouts for long-running AI operations
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Set proxy_cache_bypass to prevent caching dynamic content
            proxy_cache_bypass 1;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            expires -1;
        }

        # WebSocket support for real-time updates
        location /socket.io/ {
            proxy_pass http://backend:5000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Extended timeouts for persistent connections
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }

        # Cache configuration for static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            # Match JS, CSS, and image files with regex location pattern
            expires 1y;              # Set expires to 1 year for long-term caching
            add_header Cache-Control "public, immutable";  # Add Cache-Control: public, immutable for maximum cache efficiency
            gzip_static on;          # Enable gzip compression for compressible assets
            access_log off;
            
            # Set access control headers for cross-origin requests if needed
            # add_header Access-Control-Allow-Origin "*";
        }

        # Health check endpoint for monitoring
        location /health {
            # Respond to /health requests with 200 OK
            access_log off;          # Disable logging for health check requests to reduce noise
            add_header Content-Type text/plain;
            return 200 "healthy\n";  # Return a simple health status message
        }
    }
}